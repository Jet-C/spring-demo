plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationImplementation.extendsFrom testImplementation
	integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.rest-assured:rest-assured-all:3.3.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'io.rest-assured:rest-assured:3.3.0'
	testImplementation 'io.rest-assured:json-schema-validator:3.0.6'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude(group: 'junit', module: 'junit')
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:2.28.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.1'
}

sourceSets {

	test {
		java.srcDirs = ['src/test/java']
		resources.srcDirs = ['src/test/resources']
	}

    integration {
		java.srcDirs = ['src/integration/java']
		resources.srcDirs = ['src/integration/resources']
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

task integration(type:Test, description: 'Integration testing of API', group:'Verification') {
	testClassesDirs = sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath
	outputs.upToDateWhen {false}
	useJUnitPlatform(){
		failFast = true
	}
}


test {
	maxHeapSize = '1024m'
	useJUnitPlatform()
}

build.dependsOn integration
integration.mustRunAfter test
